#include "ros/ros.h"
#include <cv_bridge/cv_bridge.h>
#include "std_msgs/String.h"
#include <image_transport/image_transport.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/core/core.hpp>
#include <iostream>
#include <opencv2/imgproc/imgproc.hpp>     //make sure to include the relevant headerfiles
#include <opencv2/highgui/highgui.hpp>
#include <opencv/cv.h>
#include <opencv/highgui.h>

#include <iostream>
#include <boost/algorithm/string.hpp>
#include <string>
#include <sstream>
#include <stdlib.h>
#include <fstream>
#include <vector>
#include <cmath>

using namespace cv;
using namespace cv_bridge;
using namespace std;

/**
 * This tutorial demonstrates simple receipt of messages over the ROS system.
 */
 
 
string directory;
int frameCount;

void calibrate(int numImages, int numCornersHorizontal, int numCornersVertical, const char* intrinsic_name, const char* distortion_name);
void getImages(const sensor_msgs::Image::ConstPtr& msg);

void calibrate(int numImages, int numCornersHorizontal, int numCornersVertical, const char* intrinsic_name, const char* distortion_name){
	ofstream intrinsicFile;
	intrinsicFile.open(intrinsic_name);
	ofstream distortionParams;
	distortionParams.open(distortion_name);
	namedWindow("Process", WINDOW_NORMAL);

// Task 2
	int numSquares = numCornersHorizontal * numCornersVertical;
	Size boardSize = Size(numCornersHorizontal, numCornersVertical);

	vector<vector<Point3f> > object_points;
	vector<vector<Point2f> > image_points;
	Mat image;

	vector<Point3f> obj;
	for(int j=0;j<numSquares;j++){
		obj.push_back(Point3f( j/numCornersHorizontal , j%numCornersHorizontal , 0.0f));
	}

	for (int i = 0; i < numImages; i++){
		vector<Point2f> pointBuf;
		ostringstream name;
		name << directory << "/img" << i << ".jpg";
		string filename = name.str();
		image = imread(filename, CV_LOAD_IMAGE_GRAYSCALE);

	// Find chessboard inner corners, 10 corners per row/7 per column
		bool found = findChessboardCorners(image, boardSize, pointBuf, CV_CALIB_CB_ADAPTIVE_THRESH | CV_CALIB_CB_FILTER_QUADS);
		
		if(found){
		// Find subpixels with the criteria
			TermCriteria criteria = TermCriteria( CV_TERMCRIT_EPS + CV_TERMCRIT_ITER, 40, 0.01 );
			cornerSubPix(image, pointBuf, Size(10,10), Size(-1, -1), criteria);
			drawChessboardCorners(image, cvSize(numCornersHorizontal,numCornersVertical), pointBuf, found);

			cvtColor(image, image, CV_GRAY2BGR);	
			imshow("Process", image);
			waitKey(200);
			image_points.push_back(pointBuf);
			object_points.push_back(obj);
		// Draw the corners on a colored image
	/*	// Write the image
			//imwrite("Task_1.jpg", image[i]);

			//imshow("Screen", image[i]);
			//waitKey(100);*/
			std::cout << i + 1 << " processed " << pointBuf[0] << "\n";
		}
	}

	Mat intrinsic = Mat(3,3, CV_32FC1);
	Mat distCoeffs;
	Size imageSize = image.size();
	vector<Mat> rvecs, tvecs;
	intrinsic.ptr<double>(0)[0] = 1;
	intrinsic.ptr<double>(1)[1] = 1;

	calibrateCamera(object_points, image_points, imageSize, intrinsic, distCoeffs, rvecs, tvecs);
	std::cout << "Matrix is " << intrinsic << endl << distCoeffs << endl;

	for(int i = 0; i < 3; i++){
		for(int j =0; j < 3; j++){
			intrinsicFile << intrinsic.at<double>(i, j) << " ";
		}
		intrinsicFile << endl;
	}

	for(int k = 0; k < 5; k++)
		distortionParams << distCoeffs.at<double>(k) << " ";
	
//	intrinsicFile << intrinsic;
//	distortionParams << distCoeffs;

	intrinsicFile.close();
	distortionParams.close();
	return;
}

void getImages(const sensor_msgs::Image::ConstPtr& msg)
{
	// Get the image and translate it to the image, then display it. 
	char setting = 'a';
	ROS_INFO("IMG received");
	CvImagePtr cv_ptr;
	cv_ptr = toCvCopy(msg, "bgr8");
	Mat image(cv_ptr->image);
	namedWindow("Video", WINDOW_NORMAL);
	imshow("Video", image);
	char key = waitKey(30);
	//if (key == ' '){
		cout << "space bar\n";
		ostringstream name;
		name << directory << "/img" << frameCount++ << ".jpg";
		string filename = name.str();
		imwrite(filename, image);
		waitKey(10);
	if(key == 'x'){
		cout << frameCount;
		ostringstream iname, dname;
		iname << directory << "/intrinsic.txt";
		dname << directory << "/distortion.txt";
		calibrate(frameCount, 9, 7, iname.str().c_str(), dname.str().c_str() );
		return; // Actually, call the calibrate function.
	}
	
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "VideoShow");

  ros::NodeHandle n;
  frameCount = 0;
  
  	std::string topic; 
	if (n.getParam("/videoFeed", topic)){
		ROS_INFO("Got param: %s", topic.c_str());
	}else{
		ROS_ERROR("Failed to get param 'videoFeed'");
	}
  	std::string topic2;
	if (n.getParam("videoFeed", topic2)){
		ROS_ERROR("Got param: %s", topic2.c_str());
	}else{
		ROS_ERROR("Failed to get param 'videoFeed'");
	}
	
	if (n.getParam("/saveDir", directory)){
		ROS_INFO("Got param: %s", directory.c_str() );
	}else{
		ROS_ERROR("Failed to get param 'saveDir'");
	}
	
	char call[256];
	sprintf(call, "exec cp %s/intrinsic.txt %s/..", directory.c_str(), directory.c_str() );
	int a = system(call);
	sprintf(call, "exec rm %s/*", directory.c_str());
	a = system(call );
	
 	ros::Subscriber imSub = n.subscribe(topic, 1, getImages);
	ros::Rate r(0.5);
	
	while (ros::ok() ){
		ros::Duration(0.5).sleep(); 
		ros::spinOnce();
		r.sleep();
	}
 // ros::spin(); return 0;
  return 0;
} 
   
   
   
